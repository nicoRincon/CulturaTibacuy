<<<<<<< HEAD
@startuml diagrama_clases_mejorado

' Interfaces genéricas para tipo seguro
interface ICRUD<T> {
    + listarPorId(id: int): T
    + listarTodos(): List<T>
    + modificar(entidad: T): void
    + eliminar(id: int, observacion?: String): void
}

interface Autenticable {
    + autenticar(credenciales: String): boolean
}

' Clase abstracta base para CRUD
abstract class BaseCRUD<T> implements ICRUD<T> {
    - id: int
    + nombre: String
    + listarPorId(id: int): T
    + listarTodos(): List<T>
    + modificar(entidad: T): void
    + eliminar(id: int, observacion?: String): void
}

' Geografía
class Pais extends BaseCRUD<Pais> {
    + codigoIso: String
}

class Departamento extends BaseCRUD<Departamento> {
    + pais: Pais
}

class Municipio extends BaseCRUD<Municipio> {
    + departamento: Departamento
}

class LugarNacimiento {
    + pais: Pais
    + departamento: Departamento
    + municipio: Municipio
=======

@startuml diagrama_clases

' Interfaces
interface ICRUD {
    + listarPorId(id: int): object
    + listarTodos(): List<object>
    + modificar(): void
    + eliminar(observacion: String): void
}

interface Autenticable {
    + autenticar(): boolean
}

' Usuario y Roles
abstract class Usuario implements ICRUD {
    - idUsuario: int
    - primerNombre: String
    - segundoNombre: String
    - primerApellido: String
    - segundoApellido: String
    - numDocumento: String
    # fechaNacimiento: Date

    + listarPorId(id: int): Usuario
    + listarTodos(): List<Usuario>
    + modificar(): void
    + eliminar(observacion: String): void
}

Usuario ..|> Autenticable

class Estudiante extends Usuario {
    + inscribirseEnCurso(cursoId: int): void
}

class Docente extends Usuario {
    + crearCurso(): void
    + asignarNota(usuarioId: int, cursoId: int, nota: decimal): void
}

class Administrador extends Usuario {
    + crearCurso(): void
    + crearUsuario(): void
    + asignarRol(usuarioId: int, rol: Rol): void
    + gestionarPermisos(): void
    + auditarCambios(): void
    + tienePermiso(accion: String): boolean
}

' Curso
class Curso implements ICRUD {
    - idCurso: int
    - nombre: String
    - fechaInicio: Date
    - fechaFin: Date
    - cupos: int
    - cantidadAlumnos: int

    # crear(): void
    + listarPorId(id: int): Curso
    + listarTodos(): List<Curso>
    + modificar(): void
    + eliminar(observacion: String): void

    + asignarRecurso(recurso: Recurso): void
    + asignarHorario(horario: Horario): void
    + verDisponibilidad(): boolean
}

' Inscripciones
class Inscripcion implements ICRUD {
    - idInscripcion: int
    - fechaInscripcion: Date

    + listarPorId(id: int): Inscripcion
    + listarTodos(): List<Inscripcion>
    + modificar(): void
    + eliminar(observacion: String): void

    + validarCupo(): boolean
    + confirmarInscripcion(): void
}

' Evaluaciones
class Evaluacion implements ICRUD {
    - idEvaluacion: int
    - fechaEvaluacion: Date
    - nota: decimal
    - comentarios: String

    + listarPorId(id: int): Evaluacion
    + listarTodos(): List<Evaluacion>
    + modificar(): void
    + eliminar(observacion: String): void

    + registrarNota(): void
    + consultarNota(): decimal
}

' Nota Final
class NotaFinal implements ICRUD {
    - idNotaFinal: int
    - notaFinal: decimal

    + listarPorId(id: int): NotaFinal
    + listarTodos(): List<NotaFinal>
    + modificar(): void
    + eliminar(observacion: String): void

    + calcularPromedio(): decimal
}

' Permisos y Roles
class Permiso implements ICRUD {
    - idPermiso: int
    - nombre: String
    - descripcion: String

    + listarPorId(id: int): Permiso
    + listarTodos(): List<Permiso>
    + modificar(): void
    + eliminar(observacion: String): void
}

class Rol implements ICRUD {
    - idRol: int
    - nombre: String

    + listarPorId(id: int): Rol
    + listarTodos(): List<Rol>
    + modificar(): void
    + eliminar(observacion: String): void
}

class RolesPermisos {
    - idRol: int
    - idPermiso: int
    - fechaAsignacion: Date
}

Administrador --> Rol : asigna
Rol --> RolesPermisos : contiene
Permiso --> RolesPermisos : contiene

Estudiante --> Inscripcion : realiza
Estudiante --> Evaluacion : recibe
Estudiante --> NotaFinal : tiene

Docente --> Curso : crea
Curso --> Evaluacion : evalua
Curso --> NotaFinal : asigna

' Geografía
class Pais implements ICRUD {
    - idPais: int
    - nombre: String

    + listarPorId(id: int): Pais
    + listarTodos(): List<Pais>
    + modificar(): void
    + eliminar(observacion: String): void
}

class Departamento implements ICRUD {
    - idDpto: int
    - nombre: String

    + listarPorId(id: int): Departamento
    + listarTodos(): List<Departamento>
    + modificar(): void
    + eliminar(observacion: String): void
}

class Municipio implements ICRUD {
    - idMpio: int
    - nombre: String

    + listarPorId(id: int): Municipio
    + listarTodos(): List<Municipio>
    + modificar(): void
    + eliminar(observacion: String): void
}

class LugarNacimiento implements ICRUD {
    - idLugar: int

    + listarPorId(id: int): LugarNacimiento
    + listarTodos(): List<LugarNacimiento>
    + modificar(): void
    + eliminar(observacion: String): void
>>>>>>> b82e25301a055926e5fe4415c8df322c24405380
}

LugarNacimiento *-- Pais
LugarNacimiento *-- Departamento
LugarNacimiento *-- Municipio

' Escuela y programas
<<<<<<< HEAD
class Ubicacion extends BaseCRUD<Ubicacion> {
    + descripcion: String
}

class Escuela extends BaseCRUD<Escuela> {
    + ubicacion: Ubicacion
    + tipo: TipoEscuela
    + descripcion: String
}

class TipoEscuela extends BaseCRUD<TipoEscuela> {
    + tipo: String
}

class ProgramaFormacion extends BaseCRUD<ProgramaFormacion> {
    + escuela: Escuela
    + especialidades: List<Especialidad>
    + cursos: List<Curso>
}

class Especialidad extends BaseCRUD<Especialidad> {
    + nombre: String
}

' Usuario y Roles
abstract class Usuario extends BaseCRUD<Usuario> implements Autenticable {
    + primerNombre: String
    + segundoNombre: String
    + primerApellido: String
    + segundoApellido: String
    # numDocumento: String
    # fechaNacimiento: Date
    + lugarNacimiento: LugarNacimiento
    + especialidad: Especialidad
    + roles: List<Rol>
    + autenticar(credenciales: String): boolean
}

class Instructor extends Usuario {
    + experiencia: int
    + cursosDictados: List<Curso>
    + crearCurso(nombre: String): Curso
    + asignarNota(estudiante: Estudiante, curso: Curso, nota: decimal): void
}

class Estudiante extends Usuario {
    + matricula: String
    + cursosInscritos: List<Curso>
    + matricularCurso(curso: Curso): void
    + consultarNotas(curso: Curso): List<decimal>
}

class Administrador extends Usuario {
    + asignarRol(usuario: Usuario, rol: Rol): void
    + gestionarUsuarios(): void
    + gestionarCursos(): void
    + gestionarEscuelas(): void
    + gestionarProgramas(): void
    + gestionarEventos(): void
    + gestionarPermisos(): void
    + auditarCambios(): void
    + tienePermiso(accion: String): boolean
}

class Rol extends BaseCRUD<Rol> {
    + nombre: String
    + permisos: List<Permiso>
}

class Permiso extends BaseCRUD<Permiso> {
    + nombre: String
    + descripcion: String
}

' Curso
class CategoriaCurso extends BaseCRUD<CategoriaCurso> {
    + nombre: String
    + descripcion: String
}

class Horario extends BaseCRUD<Horario> {
    + dia: String
    + horaInicio: Time
    + horaFin: Time
}

class Recurso extends BaseCRUD<Recurso> {
    + nombre: String
}

class Curso extends BaseCRUD<Curso> {
    + nombre: String
    + fechaInicio: Date
    + fechaFin: Date
    + cupoMaximo: int
    + categoria: CategoriaCurso
    + instructor: Instructor
    + horarios: List<Horario>
    + recursos: List<Recurso>
    + verDisponibilidad(): boolean
}

' Inscripciones y Pagos
class Matricula extends BaseCRUD<Matricula> {
    + estudiante: Estudiante
    + curso: Curso
    + fechaMatricula: Date
    + valor: decimal
    + tipoPago: TipoPago
    + descuento: Descuento
}

class TipoPago extends BaseCRUD<TipoPago> {
    + tipo: String
}

class Descuento extends BaseCRUD<Descuento> {
    + nombre: String
    + porcentaje: decimal
    + fechaInicio: Date
    + fechaFin: Date
}

class Inscripcion extends BaseCRUD<Inscripcion> {
    + estudiante: Estudiante
    + curso: Curso
    + fechaInscripcion: Date
    + matricula: Matricula
    + validarCupo(): boolean
    + confirmarInscripcion(): void
}

' Evaluaciones
class Evaluacion extends BaseCRUD<Evaluacion> {
    + estudiante: Estudiante
    + curso: Curso
    + fechaEvaluacion: Date
    + nota: decimal
    + comentarios: String
    + registrarNota(): void
    + consultarNota(): decimal
}

' Nota Final
class NotaFinal extends BaseCRUD<NotaFinal> {
    + estudiante: Estudiante
    + curso: Curso
    + notaFinal: decimal
    + calcularPromedio(): decimal
}

' Asistencia
class Asistencia extends BaseCRUD<Asistencia> {
    + inscripcion: Inscripcion
    + fechaSesion: Date
    + asistio: boolean
}

' Eventos
class Evento extends BaseCRUD<Evento> {
    + nombre: String
    + descripcion: String
    + fechaInicio: DateTime
    + fechaFin: DateTime
    + ubicacion: Ubicacion
    + organizador: Usuario
}

' Relaciones
ProgramaFormacion "1" *-- "0..*" Curso : contiene
Usuario "1" *-- "0..*" Rol : tiene
Rol "1" *-- "0..*" Permiso : tiene
Estudiante "1" -- "0..*" Inscripcion : realiza
Estudiante "1" -- "0..*" Evaluacion : recibe
Estudiante "1" -- "1" NotaFinal : tiene
Instructor "1" -- "0..*" Curso : dicta
Curso "1" *-- "0..*" Recurso : utiliza
Curso "1" *-- "1..*" Horario : tiene
Inscripcion "1" -- "1" Matricula : tiene
Inscripcion "1" -- "0..*" Asistencia : registra
Curso "1" -- "0..*" Evaluacion : tiene
Curso "1" -- "0..*" NotaFinal : genera
Administrador "1" -- "0..*" Usuario : gestiona
Administrador "1" -- "0..*" Rol : gestiona
Evento "1" -- "1" Ubicacion : se realiza en
Evento "1" -- "1" Usuario : organizado por
Usuario "1" -- "1" LugarNacimiento : nace en
Usuario "1" -- "1" Especialidad : tiene
Escuela "1" -- "1" Ubicacion : ubicada en
Escuela "1" -- "1" TipoEscuela : es de tipo
ProgramaFormacion "1" -- "1" Escuela : ofrecido por

@enduml
=======
class Ubicacion implements ICRUD {
    - idUbicacion: int
    - descripcion: String

    + listarPorId(id: int): Ubicacion
    + listarTodos(): List<Ubicacion>
    + modificar(): void
    + eliminar(observacion: String): void
}

class Escuela implements ICRUD {
    - idEscuela: int
    - nombre: String
    - descripcion: String

    + listarPorId(id: int): Escuela
    + listarTodos(): List<Escuela>
    + modificar(): void
    + eliminar(observacion: String): void
}

class TipoEscuela implements ICRUD {
    - idTipo: int
    - tipo: String

    + listarPorId(id: int): TipoEscuela
    + listarTodos(): List<TipoEscuela>
    + modificar(): void
    + eliminar(observacion: String): void
}

class ProgramaFormacion implements ICRUD {
    - idPrograma: int

    + listarPorId(id: int): ProgramaFormacion
    + listarTodos(): List<ProgramaFormacion>
    + modificar(): void
    + eliminar(observacion: String): void
}

class Especialidad implements ICRUD {
    - idEspecialidad: int
    - nombre: String

    + listarPorId(id: int): Especialidad
    + listarTodos(): List<Especialidad>
    + modificar(): void
    + eliminar(observacion: String): void
}

ProgramaFormacion --> Escuela
ProgramaFormacion --> TipoEscuela
ProgramaFormacion --> Ubicacion

Usuario --> LugarNacimiento
Usuario --> Especialidad

@enduml
>>>>>>> b82e25301a055926e5fe4415c8df322c24405380
